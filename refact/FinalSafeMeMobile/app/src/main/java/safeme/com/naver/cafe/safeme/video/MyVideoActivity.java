package safeme.com.naver.cafe.safeme.video;import android.content.Intent;import android.content.SharedPreferences;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.Window;import android.view.WindowManager;import net.majorkernelpanic.streaming.gl.SurfaceView;import net.majorkernelpanic.streaming.rtp.MyMuxing;import java.io.File;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.Date;import safeme.com.naver.cafe.safeme.R;import safeme.com.naver.cafe.safeme.constants.Constants;import safeme.com.naver.cafe.safeme.http.HttpConnector;import safeme.com.naver.cafe.safeme.http.HttpUtils;import safeme.com.naver.cafe.safeme.http.ProcessCallback;import safeme.com.naver.cafe.safeme.http.callback.SendUserInfoCallback;import safeme.com.naver.cafe.safeme.http.callback.SendVideoFileCallback;import safeme.com.naver.cafe.safeme.map.GpsManager;import safeme.com.naver.cafe.safeme.utils.IOUtils;import safeme.com.naver.cafe.safeme.video.streaming.MyStreaming;/** * '신고하기' 기능을 총괄하는 클래스 */public class MyVideoActivity extends AppCompatActivity {    // 메인 객체 선언    protected MyStreaming myStreaming;    protected MyMuxing myMuxing;    protected String phonenum1, phonenum2;    protected String addr;    protected double lat;    protected double lng;    protected String serverip;    protected GpsManager gpsManager;    public final static String TAG = "SsfeMe::MyVideoActivity";    // refactoring....    protected MyVideoHandler myVideoHandler = new MyVideoHandler();    private String videoFileName = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());    private File videoFile;    private VideoActivityUiHelper uiHelper;    private VideoActivityFlag flagManager;    public class MyVideoHandler extends Handler {        @Override        public void handleMessage(Message msg) {            super.handleMessage(msg);            switch (msg.what) {                case Constants.ON_LOCATION_CHANGED:                    SharedPreferences sharedPreferences = getSharedPreferences("LAT_LNG_ADDR", 0);                    lat = Double.parseDouble(sharedPreferences.getString("lattitude", ""));                    lng = Double.parseDouble(sharedPreferences.getString("longitude", ""));                    addr = sharedPreferences.getString("address", "");                    sendInfo();                    break;                case Constants.STREAM_ERROR:                    finish();                    break;                case Constants.ON_FINISHED_RECORD_VIDEO:                    myMuxing.stopVideoMuxing();                    myMuxing.stopAudioMuxing();                    myMuxing.stopMediaMuxer();                    sendVideo();                    break;                case Constants.ON_FINISHED_SEND_VIDEO:                    uiHelper.onFinishedSendVideo();                    if (flagManager.isPressedBack()) {                        finish();                    }                    break;                case Constants.FINISH_VIDEO_ACTIVITY:                    if (flagManager.isPressedBack()) {                        finish();                    }                    break;            }        }    }    @Override    protected void onCreate(Bundle savedInstanceState) {        initEnvironments();        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_video);        flagManager = new VideoActivityFlag();        videoFile = IOUtils.getVideoFile(videoFileName); // Initialize File        uiHelper = new VideoActivityUiHelper(getApplicationContext(), flagManager, myVideoHandler); // 뷰 초기화        initStreaming();    // Initialize Streaming        initUserInfo();     // get lat, lng, address and get phonenum        sendInfo();         // 사용자 정보는 먼저 전송한다. 비디오는 나중에 전송.    }    private void initEnvironments() {        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);        requestWindowFeature(Window.FEATURE_NO_TITLE);    }    private void initUserInfo() {        Intent intent = getIntent();        lat = intent.getDoubleExtra("lattitude", 0.0f);        lng = intent.getDoubleExtra("longitude", 0.0f);        addr = intent.getStringExtra("address");        phonenum1 = intent.getStringExtra("phonenum1");        phonenum2 = intent.getStringExtra("phonenum2");    }    private void initStreaming() {        try {            uiHelper.onInitStreaming();            SurfaceView surfaceview = (SurfaceView) findViewById(R.id.surface);            myMuxing = new MyMuxing(videoFile.getPath() + File.separator + videoFileName);            myStreaming = new MyStreaming();            myStreaming.setContext(getApplicationContext());            myStreaming.setHandler(myVideoHandler);            myStreaming.setSurfaceView(surfaceview); //surfaceView를 세팅합니다.            myStreaming.setMediaMuxer(myMuxing);            myStreaming.init(); //초기화해줍니다.        } catch (IOException e) {            e.printStackTrace();        }    }    public void sendVideo() {        uiHelper.onStartSendVideo();        ProcessCallback callback = new SendVideoFileCallback(videoFileName + ".mp4");        String url = Constants.PARSING_URL + Constants.PARSING_DIR_VIDEO;        HttpConnector httpConnector = HttpUtils.getHttpConnector(url, callback, myVideoHandler);        while (!flagManager.isStartedSending()) {            if (!myMuxing.isStartMuxing()) {                httpConnector.start();                flagManager.setStartedSending(true);            }        }    }    public void sendInfo() {        if (flagManager.isUserInfoSended()) {            return;        }        if(!checkValidation()) {            return;        }        uiHelper.onStartSendUserInfo();        addr = getAddress();        ProcessCallback callback = new SendUserInfoCallback();        String url = Constants.PARSING_URL + Constants.PARSING_DIR_NOFIFYINFO + getPostData();        HttpConnector httpConnector = HttpUtils.getHttpConnector(url, callback, myVideoHandler);        httpConnector.start();        flagManager.setIsUserInfoSended(true);        uiHelper.onFinishedSendUserInfo();    }    private boolean checkValidation() {        if (!checkLocationValueValidation()) {            if (!checkGpsManagerValidation(gpsManager)) {                lat = 37;                lng = 126;                return true;            } else {                return false;            }        }        return false;    }    private boolean checkLocationValueValidation() {        if (lat > 0 && lng > 0) {            return true;        } else {            return false;        }    }    private boolean checkGpsManagerValidation(GpsManager gpsManager) {        if (gpsManager == null) {            gpsManager = new GpsManager();            gpsManager.setContext(getApplicationContext());            boolean result = gpsManager.initGps();            gpsManager.myVideoHandler = myVideoHandler;            Log.d("safeme", "notify : " + flagManager.isUserInfoSended() + ", GPS매니저 생성/초기화됨");            if (!result) {                return false;            }        }        return true;    }    private String getAddress() {        String[] temp = addr.split(" ");        String addr = "";        for (int i = 0; i < temp.length - 1; i++) {            addr = addr + temp[i] + "%20";        }        addr = addr + temp[temp.length - 1];        Log.d("safeme", "onLocationChanged : " + lat + ", " + lng + ", " + addr);        //Toast.makeText(getApplicationContext(), "onLocationChanged(" + lat + ", " + lng + "), address : "+addr, Toast.LENGTH_SHORT).show();        return addr;    }    public String getPostData() {        return "?pnum=" + phonenum1 + "&fname=" + videoFileName + "&str=" + addr + "&lat=" + lat + "&lon=" + lng;    }    @Override    protected void onResume() {        uiHelper.onResume();        super.onResume();        myStreaming.toggleStreaming(); // toggle streaming        flagManager.setIsPressedBack(false);    }    @Override    public void onPause() {        uiHelper.onPause();        super.onPause();        myStreaming.toggleStreaming(); // toggle streaming    }    @Override    public void onBackPressed() {        //backpress 대신 다른 버튼을 눌러 액티비티를 종료하도록 함    }    @Override    public void onDestroy() {        uiHelper.onDestroy();        myStreaming.destroyStreaming(); // stop streaming        super.onDestroy();    }}